* NICEMACS
** Usage notes
   
To tangle the =nicemacs.el= file from the command line execute the following
command:

#+begin_src sh
emacs README.org --batch --eval="(org-babel-tangle)"
#+end_src

Then to include this in your spacemacs configutation add the following
expression to =dotspacemacs/user-config=:

#+begin_src emacs-lisp
(load "/home/aez/Documents/nicemacs/nicemacs.el")
#+end_src

** Stuff

#+begin_src emacs-lisp :tangle nicemacs.el

;; mnemonic: [t]oggle-[t]heme
(spacemacs/set-leader-keys "tt" 'spacemacs/cycle-spacemacs-theme)

;; The "o" menu is all of my stuff!
(spacemacs/declare-prefix "o" "own-menu")

;; NOTE It looks like this file can be loaded with the "load" function.

(defun melbourne ()
  "Display the time in Melbourne"
  (interactive)
  (helm-world-time))


(defun read-with-espeak ()
  "Send region to espeak asynchronously."
  (interactive)
  (start-process "espeak-process" "espeak-buffer" "espeak" "-v" "en")
  (process-send-region "espeak-process" (point-min) (point-max)))

#+end_src

** Haskell 

#+begin_src emacs-lisp :tangle nicemacs.el
(spacemacs/declare-prefix "oh" "haskell-menu")
(spacemacs/set-leader-keys "ohr" 'haskell-process-restart)
(defun haskell-insert-language-pragma ()
  "Insert \"{-# LANGUAGE <point here!> #-}\""
  (interactive)
  (progn
    (insert "{-# LANGUAGE #-}")
    (evil-backward-char 3)))
(spacemacs/set-leader-keys "ohl" 'haskell-insert-language-pragma)

;; pretty printing the code with hindent (requires executable to be on path)
(spacemacs/set-leader-keys "ohhr" 'hindent-reformat-region)
(spacemacs/set-leader-keys "ohhb" 'hindent-reformat-buffer)

;; Send the current buffer to the REPL
(spacemacs/set-leader-keys "ohb" 'haskell-process-load-file)

;; Switch to the haskell REPL.
(spacemacs/set-leader-keys "ohg" 'haskell-interactive-switch)

;; Set the input method to TeX for using unicode. Use C-\ to unset this.
(spacemacs/set-leader-keys "ohu" 'set-input-method)

;; Go to the next error found by flycheck
(spacemacs/set-leader-keys "ohe" 'flycheck-next-error)
#+end_src

** Latex and Bibtex

#+begin_src emacs-lisp :tangle nicemacs.el
(defun references ()
  "Opens my bibtex references.

This function opens a buffer for the bibtex file that I keep all my references
in."
  (interactive)
  (let ((path-template "~/Documents/bibliography/references.bib"))
    (find-file path-template)
    (goto-char 1)
    (recenter-top-bottom)
    )
  )

(defun review-tex-file ()
  "Open my review.tex file"
  (interactive)
  (let ((path-template "~/Documents/bibliography/review/review.tex"))
    (find-file path-template)
    (goto-char 1)
    (recenter-top-bottom)))

(defun last-bib ()
  "Opens the most recent bibtex file in the Downloads directory in a new buffer."
  (interactive)
  (let ((bib-files (directory-files-and-attributes "~/Downloads" t ".*bib" "ctime"))
        (path-and-time (lambda (x) (list (first x) (eighth x))))
        (time-order (lambda (a b) (time-less-p (second b) (second a))))
        (most-recent (lambda (files) (car (car (sort (mapcar path-and-time files) time-order))))))
    (find-file (funcall most-recent bib-files))))


(defun switch-to-org-scratch-buffer ()
  "Switch to the `*org-scratch*' buffer, creating it first if necessary."
  (interactive)
  (let ((exists (get-buffer "*org-scratch*")))
    (switch-to-buffer (get-buffer-create "*org-scratch*"))
    (with-current-buffer "*org-scratch*" (funcall 'org-mode))))

(spacemacs/declare-prefix "ow" "writing-menu")
;; Open my references.bib
(spacemacs/set-leader-keys "owr" 'references)
;; Open the last .bib file in ~/Downloads
(spacemacs/set-leader-keys "owl" 'last-bib)
;; Reformat the current bibtex file.
(spacemacs/set-leader-keys "owf" 'bibtex-reformat)
;; Open my review.tex
(spacemacs/set-leader-keys "owt" 'review-tex-file)
;; Open a scratch buffer in org-mode
(spacemacs/set-leader-keys "owb" 'switch-to-org-scratch-buffer)
;; Force spell checking of the word at point
(spacemacs/set-leader-keys "ows" 'flyspell-correct-at-point)


#+end_src

** Org-mode

Bindings for org-mode functionality start with =o o= for "owner org".

#+begin_src emacs-lisp :tangle nicemacs.el
(spacemacs/declare-prefix "oo" "orgo-menu")
#+end_src

The =journal= function, which is bound to =SPC o o j= will open the current
agenda file and makes sure that the =org-agenda-files= variable is set to that
one. This function is here because we want a simple way to access the current
agenda file and don't want to have to search to open it manually.

*NOTE* that the =org-agenda-files= variable needs to be bound to a /list/ or
files rather than the name of a single file, otherwise it will interpret that
single file as a list of files to use.

#+begin_src emacs-lisp :tangle nicemacs.el
(defun journal ()
  "Opens the current journal file.

This function opens a buffer for the current month and puts the
cursor at the start of the buffer. It also sets the
org-agenda-files variable to be the current agenda file."
  (interactive)
  (let* ((path-template "~/Documents/journal/journal-%s.org")
         (year-month (format-time-string "%Y-%m"))
         (agenda-file (format path-template year-month)))
    (setq org-agenda-files (list agenda-file))
    (find-file agenda-file)
    (goto-char 1)
    (recenter-top-bottom)))

(setq org-agenda-start-day "-3d")
(setq org-agenda-span 30)
(setq org-agenda-start-on-weekday nil)

;; Run the journal command
(spacemacs/set-leader-keys "ooj" 'journal)
;; Start the org agenda view
(spacemacs/set-leader-keys "ooa" 'org-agenda)
;; Schedule an item in org
(spacemacs/set-leader-keys "oos" 'org-schedule)
#+end_src

#+begin_src emacs-lisp :tangle nicemacs.el
;; Tangle the current org file
(spacemacs/set-leader-keys "oot" 'org-babel-tangle)
;; open the export menu
(spacemacs/set-leader-keys "ooe" 'org-export-dispatch)

;; Make sure org files open with lines truncated
(add-hook 'org-mode-hook 'spacemacs/toggle-truncate-lines-on)

;; Set up for publishing my website, note that this will write the output\
;; directly to the github repository for the site.
(require 'ox-publish)

(setq org-publish-project-alist
      '(
        ("org-notes"
         :base-directory "~/public-site/org/"
         :base-extension "org"
         :publishing-directory "~/aezarebski.github.io/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4
         :auto-preamble t
         )
        ("org-static"
         :base-directory "~/public-site/org/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|txt\\|cur\\|svg\\|csv\\|json"
         :publishing-directory "~/aezarebski.github.io/"
         :recursive t
         :publishing-function org-publish-attachment
         )

        ("org" :components ("org-notes" "org-static"))
        ))

;; Publish my notes to the site repository and visit the index file.
(defun publish-my-site ()
  "Publish site and visit home page before running offering to commit changes."
  (interactive)
  (org-publish "org")
  (find-file "~/aezarebski.github.io/index.html")
  (magit-status))
(spacemacs/set-leader-keys "oop" 'publish-my-site)
;; Include a command and shortcut to actually visit this site in eww
(defun visit-my-site-in-eww ()
  "Visit my website in eww"
  (interactive)
  (eww "aezarebski.github.io"))
(spacemacs/set-leader-keys "oon" 'visit-my-site-in-eww)
(defun visit-my-site-index ()
  (interactive)
  (find-file "~/public-site/org/index.org"))
(spacemacs/set-leader-keys "oov" 'visit-my-site-index)
#+end_src

I used to have some commands for inserting tables and source code blocks into
org-mode files, but this functionality (and more) is all provided by
=yasnippet=. Just run =SPC i s= and it will start a search for the relevant
snippet: "source" and "table" are in there for example.

As of org-mode version about 9.3 the default behaviour appears to be that new
lines will be indented to the level of the current header. I would prefer that
new lines of text start at the start of the line. This can be achieved by
setting =org-adapt-indentation= to =nil=.

#+BEGIN_SRC emacs-lisp :tangle nicemacs.el
(setq org-adapt-indentation nil) 
#+END_SRC

** Maxima

#+begin_src emacs-lisp :tangle nicemacs.el


;; ------------------------------------------------------------------------------
;; Settings for maxima
;; ------------------------------------------------------------------------------
;; These are machine specific because it is hard to predict exactly where maxima
;; will be installed on each machine.
;;
;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/maxima/")
;; (add-to-list 'load-path "/Applications/Maxima.app/Contents/Resources/maxima/share/maxima/5.38.0/emacs")
;; (add-to-list 'load-path "/usr/local/Cellar/maxima/5.37.2/share/maxima/5.37.2/emacs")
;; (autoload 'maxima-mode "maxima" "Maxima mode" t)
;; (autoload 'imaxima "imaxima" "Frontend for maxima with Image support" t)
;; (autoload 'maxima "maxima" "Maxima interaction" t)
;; (autoload 'imath-mode "imath" "Imath mode for math formula input" t)
;; (setq imaxima-use-maxima-mode-flag t)
;; (add-to-list 'auto-mode-alist '("\\.ma[cx]" . maxima-mode))
;; ------------------------------------------------------------------------------


#+end_src

** Eshell

To add =eshell= as the default shell to spacemacs you need to add the following
to the =dotspacemacs-configuration-layers=.

#+BEGIN_SRC emacs-lisp
  (shell :variables
         shell-default-shell 'eshell
         shell-default-position "bottom")
#+END_SRC

Then the following are useful configuration for =eshell=, the =PATH= commands
are particularly important to make haskell executables available.

#+begin_src emacs-lisp :tangle nicemacs.el
(defun eshell-aliases ()
  "Visit the file containing the eshell aliases."
  (interactive)
  (find-file-other-window eshell-aliases-file))

;; allow for case insensitive tab completion of file names in eshell
(setq eshell-cmpl-ignore-case t)
(spacemacs/declare-prefix "os" "sheila-menu")
(spacemacs/set-leader-keys "osh" 'helm-eshell-history)

;; Ensure that the path contains the directory stack installs into.
;; (setq eshell-path-env (concat eshell-path-env ":/home/aez/.local/bin"))
(setenv "PATH" (concat (getenv "PATH") ":/home/aez/.local/bin"))
(setq exec-path (append exec-path '("/home/aez/.local/bin")))
#+end_src

** Emacs Speaks Statistics

#+begin_src emacs-lisp :tangle nicemacs.el
(setq spacemacs/ess-config
      '(progn
         ;; Follow Hadley Wickham's R style guide
         (setq ess-first-continued-statement-offset 2
               ess-continued-statement-offset 0
               ess-expression-offset 2
               ess-nuke-trailing-whitespace-p t
               ess-default-style 'DEFAULT)
         (when ess-disable-underscore-assign
           (setq ess-smart-S-assign-key nil))

         (define-key ess-doc-map "h" 'ess-display-help-on-object)
         (define-key ess-doc-map "p" 'ess-R-dv-pprint)
         (define-key ess-doc-map "t" 'ess-R-dv-ctable)
         (dolist (mode '(ess-r-mode ess-mode)))))

;; make documentation open in a useful mode in ess
(evil-set-initial-state 'ess-r-help-mode 'motion)
(spacemacs/declare-prefix "or" "r-menu")
(spacemacs/set-leader-keys "ors" 'run-ess-r)
(spacemacs/set-leader-keys "org" 'ess-switch-to-inferior-or-script-buffer)
(spacemacs/set-leader-keys "orr" 'ess-eval-region)
(spacemacs/set-leader-keys "orb" 'ess-eval-buffer)

;; Bindings for some devtools
(spacemacs/set-leader-keys "ordb" 'ess-r-devtools-build)
(spacemacs/set-leader-keys "ordi" 'ess-r-devtools-install-package)
(spacemacs/set-leader-keys "ordt" 'ess-r-devtools-test-package)
(spacemacs/set-leader-keys "ordl" 'ess-r-devtools-load-package)


;; Include a little function to run a particular file if it exists which can be
;; very useful for testing only specific parts of a package being developed
(defun ess-r-execute-sneaky ()
  "If a file .sneaky.R exists in the current directory then
source it into the R session."
  (interactive)
  (if (file-exists-p ".sneaky.R")
      (ess-r-package-eval-linewise
       "source(\".sneaky.R\")"
       "Running .sneaky.R")
    (message "Missing file .sneaky.R")))

(spacemacs/set-leader-keys "orx" 'ess-r-execute-sneaky)


(defun styler-reformat-buffer ()
  "Run styler on the current buffer."
  (interactive)
  (let ((cmd-pattern "R -q --vanilla -e \'options(warn=-1); styler::style_file(\"%s\")\'")
        (curr-buffer-path (buffer-file-name)))
    (shell-command (format cmd-pattern curr-buffer-path))))
(spacemacs/set-leader-keys "orf" 'styler-reformat-buffer)

#+end_src

** Version control via magit

#+begin_src emacs-lisp :tangle nicemacs.el
;; Open the magit status in a full frame.
(setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
#+end_src

#+begin_src emacs-lisp :tangle nicemacs.el
;; ------------------------------------------------------------------------------
;; Ergonomics and generic emacs stuff
;; ------------------------------------------------------------------------------
(defun kill-all-other-buffers ()
  "Kill all the buffers other than the current one."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

;; Define a short cut to close all windows except the current one without killing
;; their buffers.
(spacemacs/set-leader-keys "wD" 'spacemacs/window-manipulation-transient-state/delete-other-windows)

;; Define a short cut for C-g which is a little awkward.
(spacemacs/set-leader-keys "og" 'keyboard-quit)

;; Define a short cut for following files
(spacemacs/declare-prefix "of" "file-stuff")
(spacemacs/set-leader-keys "off" 'find-file-at-point)
(spacemacs/set-leader-keys "ofb" 'ibuffer)
(spacemacs/set-leader-keys "ofp" 'helm-projectile-find-file)
;; Open Ibuffer in the motion state rather than as the default emacs mode.
(evil-set-initial-state 'ibuffer-mode 'motion)


;; ------------------------------------------------------------------------------
;; Vega(-lite)
;; ------------------------------------------------------------------------------

(defun vl-view (spec-filepath)
  "Render a vega-lite specification."
  (interactive)
  (let* ((plot-filepath (concat (file-name-sans-extension spec-filepath) ".png"))
         (vl-cmd (format "vl2png %s %s" spec-filepath plot-filepath)))
    (shell-command vl-cmd)
    (find-file plot-filepath)))

#+end_src

* Snippets

Snippets usually live in =~/.emacs.d/private/snippets= in a directory which is
named after the major mode for them to be used in. You need to
=yas-recompile-all= and =yas-reload-all= for any changes to the snippets to take
effect.

*WARNING!* Tangling this file will write the snippets to your private snippet
directory which is convenient for me but may not be desirable for everyone. It
is set this way so that I don't have to remember to copy the tangled files over
all the time.

** Vega-Lite

The following files need to be moved into the correct snippet directory for your
configuration.

A snippet for a very simple scatter plot in vega-lite.

#+BEGIN_SRC snippet :tangle vl-scatter-plot
# -*- mode: snippet -*-
# name: vega-lite scatter plot
# key: vl-scatter-plot
# --

{
    "$schema": "https://vega.github.io/schema/vega-lite/v4.json",
    "data": {
        "url": "$1"
    },
    "mark": "point",
    "encoding": {
        "x": {
            "field": "$2",
            "type": "quantitative"
        },
        "y": {
            "field": "$3",
            "type": "quantitative"
        }
    }
}
#+END_SRC

A snippet for a very simple histogram in vega-lite.

#+BEGIN_SRC snippet :tangle vl-histogram
# -*- mode: snippet -*-
# name: vega-lite histogram
# key: vl-histogram
# --

{
    "$schema": "https://vega.github.io/schema/vega-lite/v4.json",
    "data": {
        "url": "$1"
    },
    "mark": "bar",
    "encoding": {
        "x": {
            "bin": true,
            "field": "$2"
        },
        "y": {
            "aggregate": "count"
        }
    }
}
#+END_SRC

** R 

A snippet to include the basic packages

#+BEGIN_SRC snippet :tangle ~/.emacs.d/private/snippets/ess-r-mode/rpacks
# -*- mode: snippet -*-
# name: Standard R packages
# key: rpacks
# --
library(dplyr)
library(purrr)
library(magrittr)
library(ggplot2)
library(stringr)
library(jsonlite)
#+END_SRC

A snippet to include packages that are useful when working with geographic data

#+BEGIN_SRC snippet :tangle ~/.emacs.d/private/snippets/ess-r-mode/rgeopacks
# -*- mode: snippet -*-
# name: R packages for computational geography
# key: rgeopacks
# --

library(sf)
library(countrycode)

$0
#+END_SRC

A snippet to include packages that are useful for doing MCMC

#+BEGIN_SRC snippet :tangle ~/.emacs.d/private/snippets/ess-r-mode/rmcmc
# -*- mode: snippet -*-
# name: R packages for MCMC
# key: rmcmc
# --

library(mcmc) # provides the \code{mcmc} class
library(coda) # provides the \code{metrop} function

$0
#+END_SRC

A snippet with sensible defaults for writing a data frame to CSV

#+BEGIN_SRC snippet :tangle ~/.emacs.d/private/snippets/ess-r-mode/rtable
# -*- mode: snippet -*-
# name: CSV output from R using write.table
# key: rtable
# --

write.table(x = $1,
            file = $2,
            sep = ",",
            row.names = FALSE)

$0
#+END_SRC

A snippet to provide a main function which only runs when the script is called
from the command line and passes any command line arguments through.

#+BEGIN_SRC snippet :tangle ~/.emacs.d/private/snippets/ess-r-mode/rmain
# -*- mode: snippet -*-
# name: Main function for an R script to be used at the command line
# key: rmain
# --

main <- function(args) {
  $0
}

if (!interactive()) {
  args <- commandArgs(trailingOnly = TRUE)
  main(args)
}
#+END_SRC

** Writing

I use the following as a format for recording information about journals that
are relevant to my research.

#+BEGIN_SRC snippet :tangle journal
# -*- mode: snippet -*-
# name: Description of an academic journal
# key: journal
# --
{
    "name": "$1",
    "publisher": "",
    "url": "",
    "ISO": "",
    "JCR": "",
    "metric": [
        {
            "year": ,
            "impactFactor":
        }
    ],
    "tenRelated": [
    ]
}
#+END_SRC

